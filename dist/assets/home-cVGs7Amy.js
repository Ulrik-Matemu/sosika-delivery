import"./style-ETqBUHLR.js";document.addEventListener("DOMContentLoaded",function(){const e=document.getElementById("toggleButton"),r=localStorage.getItem("deliveryPersonId");e.addEventListener("click",async function(){try{const t=await fetch(`https://sosika-backend.onrender.com/api/deliveryPerson/${r}/toggle-active`,{method:"PUT",headers:{"Content-Type":"application/json"}}),o=await t.json();t.ok?(e.textContent=o.is_active?"Go Offline":"Go Online",e.classList.toggle("active",o.is_active),console.log("Updated status:",o.is_active)):console.error("Error:",o.message)}catch(t){console.error("Failed to toggle status:",t)}})});const f=io("https://sosika-backend.onrender.com"),b=localStorage.getItem("deliveryPersonId");let u=null,p=null;console.log(b);f.emit("joinDelivery",b);function v(e){console.log("Showing notification for order:",e),document.getElementById("orderNumber").textContent=e.orderId,document.getElementById("foodieNumber").textContent=e.phoneNumber,document.getElementById("orderNotification").style.display="block"}f.on("newOrderAvailable",e=>{console.log("New order received:",e)});const I=document.createElement("div");I.innerHTML='<div style="background-color: green; color: white; padding: 5px; border-radius: 50px; font-size: 12px; text-align: center; width: max-content;">Pick Up</div>';const w=document.createElement("div");w.innerHTML='<div style="background-color: Red; color: white; padding: 5px; border-radius: 50px; font-size: 12px; text-align: center; width: max-content;">Drop</div>';function h(e,r){if(!e||!r){console.error("Missing pickup or dropoff location:",{pickupLocation:e,dropoffLocation:r});return}m();function t(g){const i=g.match(/\((-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)\)/);if(!i)return null;const x=parseFloat(i[1]),L=parseFloat(i[3]);return{lat:x,lng:L}}console.log(t(e));const o=t(e),a=t(r),c=o.lng,n=o.lat,l=a.lng,d=a.lat;function k(g,i){return typeof g=="number"&&typeof i=="number"&&!isNaN(g)&&!isNaN(i)}if(!k(n,c)||!k(d,l)){console.error("Invalid coordinates:",{pickupLat:n,pickupLng:c,dropoffLat:d,dropoffLng:l});return}u=new mapboxgl.Marker({element:I}).setLngLat([c,n]).setPopup(new mapboxgl.Popup().setText("Pickup location")).addTo(s),p=new mapboxgl.Marker({element:w}).setLngLat([l,d]).setPopup(new mapboxgl.Popup().setText("Dropoff location")).addTo(s);const y=new mapboxgl.LngLatBounds;y.extend([c,n]),y.extend([l,d]),s.fitBounds(y,{padding:100}),S({x:n,y:c},{x:d,y:l})}function O(){s.getLayer("route")&&s.removeLayer("route"),s.getSource("route")&&s.removeSource("route")}function m(){u&&(u.remove(),u=null),p&&(p.remove(),p=null),O()}function S(e,r){const t=`https://api.mapbox.com/directions/v5/mapbox/driving/${e.x},${e.y};${r.x},${r.y}?geometries=geojson&access_token=${mapboxgl.accessToken}`;fetch(t).then(o=>{if(!o.ok)throw new Error(`HTTP Error: ${o.status}`);return o.json()}).then(o=>{if(console.log("API Response:",o),!o.routes||o.routes.length===0)throw new Error("No route found in response.");const a=o.routes[0].geometry;if(console.log("Extracted Route Geometry:",a),!a)throw new Error("Route geometry is missing.");s.getSource("route")?s.getSource("route").setData({type:"Feature",properties:{},geometry:a}):(s.addSource("route",{type:"geojson",data:{type:"Feature",properties:{},geometry:a}}),s.addLayer({id:"route",type:"line",source:"route",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":"#1DB954","line-width":5,"line-opacity":.8}}))}).catch(o=>console.error("Error fetching route:",o))}f.on("orderAssigned",e=>{console.log("New Order Assigned:",e),alert(`New order available: ${e.orderId}`)});f.on("orderCompleted",e=>{console.log("Order Completed:",e),alert(`Order ${e.orderId} is marked as completed.`)});document.addEventListener("DOMContentLoaded",function(){let e=localStorage.getItem("orderLocations");e=JSON.parse(e),e!=null&&e.pickup_location&&(e!=null&&e.dropoff_location)?(h(e.pickup_location,e.dropoff_location),v(e.orderId)):console.warn("No valid orderLocations found in localStorage"),e&&(console.log("Restoring order locations from localStorage:",e),h(e.pickup_location,e.dropoff_location),v(e.orderId))});document.addEventListener("DOMContentLoaded",function(){let e=localStorage.getItem("orderLocations");e=JSON.parse(e);async function r(){const t=localStorage.getItem("assignedOrder"),o=e.orderId;if(t||e){let a=JSON.parse(t);try{console.log(a),console.log(e.orderId);const n=await(await fetch(`https://sosika-backend.onrender.com/api/orders/${o}`)).json();console.log(n),n.message==="Order not found"?console.log("Order not found"):n.order_status==="completed"?(console.log("Order completed. Removing from localStorage."),m(),localStorage.removeItem("assignedOrder"),localStorage.removeItem("pickUp"),localStorage.removeItem("dropOff"),location.reload()):n.order_status==="in_progress"?(console.log("Order status changed back to 'in_progress'. Alerting delivery person."),alert("Order status changed back to 'In-Progress'. Please check your assigned orders."),m(),localStorage.removeItem("assignedOrder"),location.reload()):n.order_status==="cancelled"?(alert("Order has been cancelled"),m(),localStorage.removeItem("orderLocations"),location.reload()):(console.log("Restoring assigned order:",e),h(n.pickup_location,n.dropoff_location),v(e))}catch(c){console.error("Error fetching order status:",c)}}}r(),setInterval(r,1e4)});mapboxgl.accessToken="pk.eyJ1IjoiLS11bHJpa2siLCJhIjoiY203YzV5dHIyMGY3NjJqc2Q5MmpxNm4ycCJ9.TilyKOmKcw2ekL2PY8Xofw";const s=new mapboxgl.Map({container:"map",style:"mapbox://styles/mapbox/streets-v11",center:[34.888822,-6.369028],zoom:5}),E=new mapboxgl.Marker().setLngLat([0,0]).addTo(s);function P(e){const r=e.coords.longitude,t=e.coords.latitude;E.setLngLat([r,t]),s.setCenter([r,t])}navigator.geolocation?navigator.geolocation.watchPosition(P,e=>console.log("Geolocation error:",e),{enableHighAccuracy:!0}):alert("Geolocation is not supported by your browser.");async function N(){if(!navigator.geolocation){console.error("Geolocation is not supported by this browser.");return}navigator.geolocation.getCurrentPosition(async e=>{const r=e.coords.latitude,t=e.coords.longitude,o=localStorage.getItem("deliveryPersonId");try{const c=await(await fetch(`https://sosika-backend.onrender.com/api/deliveryPerson/update-location/${o}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({latitude:r,longitude:t})})).json();console.log("Location updated:",c)}catch(a){console.error("Error updating location:",a)}},e=>{console.error("Error fetching location:",e)})}setInterval(N,1e4);
